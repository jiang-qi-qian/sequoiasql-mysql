CREATE DATABASE const_cond_sequoiadb;
use const_cond_sequoiadb;
CREATE TABLE const_table(pk int primary key, c1 int, c2 int, c3 TEXT);
CREATE TABLE normal_table(c1 int, c2 int, c3 TEXT);
CREATE TABLE sys_user (
id bigint not null,
company_id varchar(64) collate utf8mb4_bin not null,
office_id varchar(64) collate utf8mb4_bin not null,
login_name varchar(100) collate utf8mb4_bin not null,
password varchar(100) collate utf8mb4_bin not null,
no varchar(100) collate utf8mb4_bin default null,
del_flag char(1) collate utf8mb4_bin not null default '0',
primary key(id),
key office_id(office_id),
key del_flag(del_flag)
);
CREATE TABLE sys_office(
id bigint not null,
parent_ids varchar(2000) collate utf8mb4_bin not null,
code varchar(100) collate utf8mb4_bin default null,
del_flag char(1) collate utf8mb4_bin not null default '0',
primary key(id),
key del_flag(del_flag)
);
INSERT INTO const_table VALUES( 1, 1, 1, '1' ), ( 2, 2, 2, '2' );
INSERT INTO normal_table VALUES( 1, 1, '1' ), ( 2, 2, '2' );
INSERT INTO sys_user values(13189, '12', '13189', 'aaa', 'bbb', '123', '0');
INSERT INTO sys_office values(13189, '0,1,abc', 'abc', '0');
set session sequoiadb_debug_log = ON;
set session sequoiadb_support_cond_const_bool = OFF;
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NULL OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((isnull('1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NULL OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT NULL OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is not null) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT NULL OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` = '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` = '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((1 or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <=> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <=> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <=> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$ne": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' < `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' < `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gt": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' < 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' > `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' > `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$lt": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' > 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' >= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' >= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$lte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' >= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN 1 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' between 1 and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN 1 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 BETWEEN c.c1 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` between '1' and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` between '1' and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 BETWEEN c.c1 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "$and": [ { "c2": { "$gte": 1 } }, { "c2": { "$lte": 3 } } ] }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN n.c2 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' between `const_cond_sequoiadb`.`n`.`c2` and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN n.c2 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (1, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' in (1,2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (1, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 IN (c.c1, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` in ('1',2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` in ('1',2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 IN (c.c1, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$in": [ 1, 2, 3 ] } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (n.c2, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' in (`const_cond_sequoiadb`.`n`.`c2`,2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (n.c2, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE '1%' OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' like '1%') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE '1%' OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c3 LIKE c.c3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c3` like '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c3 LIKE c.c3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE n.c3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' like `const_cond_sequoiadb`.`n`.`c3`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE n.c3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
(((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((('1' like '1%') and (`const_cond_sequoiadb`.`n`.`c2` < 2)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
(((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
((((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1) XOR n.c3 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((((<cache>(('1' like '1%')) and (`const_cond_sequoiadb`.`n`.`c2` < 2)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)) xor (`const_cond_sequoiadb`.`n`.`c3` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
((((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1) XOR n.c3 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (NOT (c.c3 <=> '1') OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((not(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (NOT (c.c3 <=> '1') OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 = MOD(c.c2, 10) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` = <cache>(('1' % 10))) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` = <cache>(('1' % 10))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 = MOD(c.c2, 10) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c2 = MOD(n.c2, 10) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' = (`const_cond_sequoiadb`.`n`.`c2` % 10)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c2 = MOD(n.c2, 10) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 >= (c.c3 <=> '1') OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` >= <cache>(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 >= (c.c3 <=> '1') OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is not true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c LEFT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` left join `const_cond_sequoiadb`.`normal_table` `n` on((`const_cond_sequoiadb`.`n`.`c1` = '1')) where ((('1' is true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c LEFT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c RIGHT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where with pushed condition (`const_cond_sequoiadb`.`n`.`c1` = '1')
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`normal_table` `n` join `const_cond_sequoiadb`.`const_table` `c` where ((`const_cond_sequoiadb`.`n`.`c1` = '1') and (('1' is true) or ('1' < 1)))
SELECT * FROM const_table AS c RIGHT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "c1": { "$et": 1 } }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c INNER JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where with pushed condition (`const_cond_sequoiadb`.`n`.`c1` = '1')
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((`const_cond_sequoiadb`.`n`.`c1` = '1') and (('1' is true) or ('1' < 1)))
SELECT * FROM const_table AS c INNER JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "c1": { "$et": 1 } }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' ) 
ORDER BY o.CODE ,a.NO;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	o	NULL	const	PRIMARY	PRIMARY	8	const	1	100.00	Using filesort
1	SIMPLE	a	NULL	ref	office_id,del_flag	del_flag	4	const	2	100.00	Using where
SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' ) 
ORDER BY o.CODE ,a.NO;
id	company_id	office_id	login_name	password	no	del_flag	id	parent_ids	code	del_flag
13189	12	13189	aaa	bbb	123	0	13189	0,1,abc	abc	0
[Note] SequoiaDB: Query message: condition[{ "del_flag": { "$et": "0" } }], selector[{}], order_by[{ "del_flag": 1 }], hint[{ "": "del_flag" }], limit[-1], offset[0], table[const_cond_sequoiadb.sys_user]
EXPLAIN SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' OR a.id = 12066 )
ORDER BY o.CODE ,a.NO;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	o	NULL	const	PRIMARY	PRIMARY	8	const	1	100.00	Using filesort
1	SIMPLE	a	NULL	ref	PRIMARY,office_id,del_flag	del_flag	4	const	2	100.00	Using where
SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' OR a.id = 12066 )
ORDER BY o.CODE ,a.NO;
id	company_id	office_id	login_name	password	no	del_flag	id	parent_ids	code	del_flag
13189	12	13189	aaa	bbb	123	0	13189	0,1,abc	abc	0
[Note] SequoiaDB: Query message: condition[{ "del_flag": { "$et": "0" } }], selector[{}], order_by[{ "del_flag": 1 }], hint[{ "": "del_flag" }], limit[-1], offset[0], table[const_cond_sequoiadb.sys_user]
set session sequoiadb_support_cond_const_bool = ON;
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NULL OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (isnull('1') or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((isnull('1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NULL OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 0 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT NULL OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' is not null) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is not null) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT NULL OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` = '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` = '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((1 or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 = 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <=> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <=> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' <=> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <=> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <=> 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <> `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$ne": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' <> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <> 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 != 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 0 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' < `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' < `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gt": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' < 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' < 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 < 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 0 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' <= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' <= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' <= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 <= 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' > `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' > `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$lt": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' > 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' > 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 > 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 0 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= n.c2 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition (('1' >= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' >= `const_cond_sequoiadb`.`n`.`c2`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= n.c2 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$lte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= 1 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' >= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' >= 1) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 >= 1 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN 1 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' between 1 and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' between 1 and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN 1 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 BETWEEN c.c1 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` between '1' and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` between '1' and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 BETWEEN c.c1 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "$and": [ { "c2": { "$gte": 1 } }, { "c2": { "$lte": 3 } } ] }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN n.c2 AND 3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' between `const_cond_sequoiadb`.`n`.`c2` and 3) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 BETWEEN n.c2 AND 3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (1, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' in (1,2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' in (1,2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (1, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 IN (c.c1, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` in ('1',2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` in ('1',2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 IN (c.c1, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$in": [ 1, 2, 3 ] } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (n.c2, 2, 3) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' in (`const_cond_sequoiadb`.`n`.`c2`,2,3)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IN (n.c2, 2, 3) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE '1%' OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition (('1' like '1%') or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' like '1%') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE '1%' OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c3 LIKE c.c3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c3` like '1') or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c3 LIKE c.c3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE n.c3 OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' like `const_cond_sequoiadb`.`n`.`c3`) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c3 LIKE n.c3 OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
(((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((('1' like '1%') and (`const_cond_sequoiadb`.`n`.`c2` < 2)) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((('1' like '1%') and (`const_cond_sequoiadb`.`n`.`c2` < 2)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
(((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "$and": [ { "_id": { "$exists": 1 } }, { "c2": { "$lt": 2 } } ] }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
((((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1) XOR n.c3 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((((<cache>(('1' like '1%')) and (`const_cond_sequoiadb`.`n`.`c2` < 2)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)) xor (`const_cond_sequoiadb`.`n`.`c3` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND 
((((c.c3 LIKE '1%') AND 
(n.c2 < 2)) OR
n.c1 < 1) XOR n.c3 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (NOT (c.c3 <=> '1') OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where with pushed condition ((not(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((not(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (NOT (c.c3 <=> '1') OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "_id": { "$exists": 0 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 = MOD(c.c2, 10) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` = <cache>(('1' % 10))) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` = <cache>(('1' % 10))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 = MOD(c.c2, 10) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$et": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c2 = MOD(n.c2, 10) OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' = (`const_cond_sequoiadb`.`n`.`c2` % 10)) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c2 = MOD(n.c2, 10) OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 >= (c.c3 <=> '1') OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	75.00	Using where with pushed condition ((`const_cond_sequoiadb`.`n`.`c2` >= <cache>(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1))
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where (((`const_cond_sequoiadb`.`n`.`c2` >= <cache>(('1' <=> '1'))) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (n.c2 >= (c.c3 <=> '1') OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{ "$or": [ { "c2": { "$gte": 1 } }, { "c1": { "$lt": 1 } } ] }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
1	1	1	1	2	2	2
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((('1' is not true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c, normal_table AS n
WHERE c.pk = 1 AND (c.c1 IS NOT TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c LEFT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` left join `const_cond_sequoiadb`.`normal_table` `n` on((`const_cond_sequoiadb`.`n`.`c1` = '1')) where ((('1' is true) or (`const_cond_sequoiadb`.`n`.`c1` < 1)))
SELECT * FROM const_table AS c LEFT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{}], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c RIGHT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where with pushed condition (`const_cond_sequoiadb`.`n`.`c1` = '1')
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`normal_table` `n` join `const_cond_sequoiadb`.`const_table` `c` where ((`const_cond_sequoiadb`.`n`.`c1` = '1') and (('1' is true) or ('1' < 1)))
SELECT * FROM const_table AS c RIGHT JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "c1": { "$et": 1 } }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM const_table AS c INNER JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	c	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	NULL
1	SIMPLE	n	NULL	ALL	NULL	NULL	NULL	NULL	2	50.00	Using where with pushed condition (`const_cond_sequoiadb`.`n`.`c1` = '1')
Warnings:
Note	1003	/* select#1 */ select '1' AS `pk`,'1' AS `c1`,'1' AS `c2`,'1' AS `c3`,`const_cond_sequoiadb`.`n`.`c1` AS `c1`,`const_cond_sequoiadb`.`n`.`c2` AS `c2`,`const_cond_sequoiadb`.`n`.`c3` AS `c3` from `const_cond_sequoiadb`.`const_table` `c` join `const_cond_sequoiadb`.`normal_table` `n` where ((`const_cond_sequoiadb`.`n`.`c1` = '1') and (('1' is true) or ('1' < 1)))
SELECT * FROM const_table AS c INNER JOIN normal_table AS n
ON c.c1 = n.c1
WHERE c.pk = 1 AND (c.c1 IS TRUE OR n.c1 < 1);
pk	c1	c2	c3	c1	c2	c3
1	1	1	1	1	1	1
[Note] SequoiaDB: Query message: condition[{ "c1": { "$et": 1 } }], selector[{}], order_by[{}], hint[{}], limit[-1], offset[0], table[const_cond_sequoiadb.normal_table]
EXPLAIN SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' ) 
ORDER BY o.CODE ,a.NO;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	o	NULL	const	PRIMARY	PRIMARY	8	const	1	100.00	Using filesort
1	SIMPLE	a	NULL	ref	office_id,del_flag	del_flag	4	const	2	100.00	Using where
SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' ) 
ORDER BY o.CODE ,a.NO;
id	company_id	office_id	login_name	password	no	del_flag	id	parent_ids	code	del_flag
13189	12	13189	aaa	bbb	123	0	13189	0,1,abc	abc	0
[Note] SequoiaDB: Query message: condition[{ "del_flag": { "$et": "0" } }], selector[{}], order_by[{ "del_flag": 1 }], hint[{ "": "del_flag" }], limit[-1], offset[0], table[const_cond_sequoiadb.sys_user]
EXPLAIN SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' OR a.id = 12066 )
ORDER BY o.CODE ,a.NO;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	o	NULL	const	PRIMARY	PRIMARY	8	const	1	100.00	Using filesort
1	SIMPLE	a	NULL	ref	PRIMARY,office_id,del_flag	del_flag	4	const	2	100.00	Using where with pushed condition ((('0,1,abc' like '0,1,%') or (`const_cond_sequoiadb`.`a`.`id` = 12066)) and ('13189' = `const_cond_sequoiadb`.`a`.`office_id`))
SELECT * FROM sys_user a LEFT JOIN sys_office o 
ON o.id = a.office_id 
WHERE a.del_flag = '0' AND o.id = '13189' AND ( o.id = '1' OR o.parent_ids LIKE '0,1,%' OR a.id = 12066 )
ORDER BY o.CODE ,a.NO;
id	company_id	office_id	login_name	password	no	del_flag	id	parent_ids	code	del_flag
13189	12	13189	aaa	bbb	123	0	13189	0,1,abc	abc	0
[Note] SequoiaDB: Query message: condition[{ "$and": [ { "$or": [ { "_id": { "$exists": 1 } }, { "id": { "$et": 12066 } } ] }, { "del_flag": { "$et": "0" } } ] }], selector[{}], order_by[{ "del_flag": 1 }], hint[{ "": "del_flag" }], limit[-1], offset[0], table[const_cond_sequoiadb.sys_user]
set session sequoiadb_debug_log = default;
set session sequoiadb_support_cond_const_bool = default;
DROP DATABASE const_cond_sequoiadb;
