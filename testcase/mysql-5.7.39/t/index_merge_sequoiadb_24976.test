#
# seqDB-24976
# Index merge functionality tests 
#

--source include/have_sequoiadb.inc

--disable_warnings
set session optimizer_switch="index_merge_intersection=off";

drop database if exists index_merge_sequoiadb;
create database index_merge_sequoiadb;
drop database index_merge_sequoiadb;
create database index_merge_sequoiadb;
use index_merge_sequoiadb;

--enable_warnings

create table t1(
    a   int,
    b   varchar(10),
    c   varchar(10),
    d   varchar(10),
    key idx_a(a),
    key idx_b(b),
    key idx_c(c),
    key idx_d(d)
);

create table t2(
   e   int,
   f   varchar(10),
   g   varchar(10),
   h   varchar(10),
   key idx_e(e),
   key idx_f(f),
   key idx_g(g),
   key idx_h(h)
);

create table t3
(
    col1 int,
    col2 varchar(10)
);

create table t4
(
    col3 int,
    col4 varchar(10)
);

insert into t1 value 
    (1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),
    (1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),
    (1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),
    (2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),
    (3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5');

insert into t2 value
    (1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),(1,'2','1','4'),
    (1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),(1,'2','2','4'),
    (1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),(1,'1','3','4'),
    (2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),(2,'3','4','5'),
    (3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5'),(3,'1','5','5');

insert into t3 value (1,'a'),(2,'b'),(3,'c'),(4,'d'),(5,'e');
insert into t4 value (1,'x'),(2,'y'),(3,'z'),(4,'w'),(5,'v');

# 简单场景

# ror union
# b被a范围包含
explain select * from t1 force index(idx_a,idx_b) where a = 1 or b = '2';
--sorted_result
select * from t1 force index(idx_a,idx_b)  where a=1 or b = '2';
# 部分重合
explain select * from t1 force index(idx_a,idx_b) where a = 1 or b = '1';
--sorted_result
select * from t1 force index(idx_a,idx_b) where a=1 or b = '1';

# sort union
# b被a范围包含
explain select * from t1 force index(idx_a,idx_b) where a < 2 or b < '3';
--sorted_result
select * from t1 force index(idx_a,idx_b) where a < 2 or b < '3';
# 部分重合
explain select * from t1 force index(idx_a,idx_b) where a < 2 or b < '2';
--sorted_result
select * from t1 force index(idx_a,idx_b) where a < 2 or b < '2';


# and/or混合场景

# ror union
# b被a范围包含
explain select * from t1 force index(idx_a,idx_b) where ( a = 1 and c = '3') or (b = '2' and d = '4');
--sorted_result
select * from t1 force index(idx_a,idx_b) where ( a = 1 and c = '3') or (b = '2' and d = '4');
# 部分重合
explain select * from t1 force index(idx_a,idx_b) where ( a = 1 and c = '3') or (b = '1' and d = '4');
--sorted_result
select * from t1 force index(idx_a,idx_b) where ( a = 1 and c = '3') or (b = '1' and d = '4');

# sort union
# b被a范围包含
explain select * from t1 force index(idx_a,idx_b) where ( a < 2 and c < '999') or (b < '3' and d < '999');
--sorted_result
select * from t1 force index(idx_a,idx_b) where ( a < 2 and c < '999') or (b < '3' and d < '999');
# 部分重合
explain select * from t1 force index(idx_a,idx_b) where ( a < 2 and c < '999') or (b < '2' and d < '999');
--sorted_result
select * from t1 force index(idx_a,idx_b) where ( a < 2 and c < '999') or (b < '2' and d < '999');


# 以下场景基于混合场景下的部分重合的结果进行进一步的join运算

# inner join
# ror union 部分重合
explain select * from t1 force index(idx_a,idx_b) inner join t2 on ( a = 1 and e = 1) or (b = '1' and f = '1');
--sorted_result
select * from t1 force index(idx_a,idx_b) inner join t2 on ( a = 1 and e = 1) or (b = '1' and f = '1');
# 条件外置到where
explain select * from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1');
--sorted_result
select * from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1');

# sort union 部分重合
explain select * from t1 force index(idx_a,idx_b) inner join t2 on ( a < 2 and e < 2) or (b < '2' and f < '2');
--sorted_result
select * from t1 force index(idx_a,idx_b) inner join t2 on ( a < 2 and e < 2) or (b < '2' and f < '2');
# 条件外置到where
explain select * from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2');
--sorted_result
select * from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2');

# right join
# ror union 部分重合
explain select * from t1 force index(idx_a,idx_b) right join t2 on ( a = 1 and e = 1) or (b = '1' and f = '1');
--sorted_result
select * from t1 force index(idx_a,idx_b) right join t2 on ( a = 1 and e = 1) or (b = '1' and f = '1');
# 条件外置到where
explain select * from t1 force index(idx_a,idx_b) right join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1');
--sorted_result
select * from t1 force index(idx_a,idx_b) right join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1');

# sort union 部分重合
explain select * from t1 force index(idx_a,idx_b) right join t2 on ( a < 2 and e < 2) or (b < '2' and f < '2');
--sorted_result
select * from t1 force index(idx_a,idx_b) right join t2 on ( a < 2 and e < 2) or (b < '2' and f < '2');
# 条件外置到where
explain select * from t1 force index(idx_a,idx_b) right join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2');
--sorted_result
select * from t1 force index(idx_a,idx_b) right join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2');

# 以下场景基于inner join下外置where的结果进行进一步的聚合运算

# ror union
explain select *,count(c) as i from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1') group by c,a,b,d,e,f,g,h;
--sorted_result
select *,count(c) as i from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a = 1 and e = 1) or (b = '1' and f = '1') group by c,a,b,d,e,f,g,h;
# 带having
explain 
select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a = 1 and e = 1) or (b = '1' and f = '1') 
group by c,a,b,d,e,f,g,h having d !='5';

--sorted_result
select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a = 1 and e = 1) or (b = '1' and f = '1') 
group by c,a,b,d,e,f,g,h having d !='5';

# sort union
explain select *,count(c) as i from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2') group by c,a,b,d,e,f,g,h;
--sorted_result
select *,count(c) as i from t1 force index(idx_a,idx_b) inner join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2') group by c,a,b,d,e,f,g,h;
# 带having
explain 
select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a < 2 and e < 2) or (b < '2' and f < '2') 
group by c,a,b,d,e,f,g,h having d !='5';

--sorted_result
select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a < 2 and e < 2) or (b < '2' and f < '2') 
group by c,a,b,d,e,f,g,h having d !='5';


# 基于以上带having的结果 加入order by
# ror union
explain select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a = 1 and e = 1) or (b = '1' and f = '1') 
group by c,a,b,d,e,f,g,h having d !='5' 
order by i,g,h,b,c desc;

select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a = 1 and e = 1) or (b = '1' and f = '1') 
group by c,a,b,d,e,f,g,h having d !='5' 
order by i,g,h,b,c desc;

# sort union
explain 
select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f where ( a < 2 and e < 2) or (b < '2' and f < '2') 
group by c,a,b,d,e,f,g,h having d !='5' 
order by i,g,h,b,c desc;

select *,count(c) as i from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f 
where ( a < 2 and e < 2) or (b < '2' and f < '2') 
group by c,a,b,d,e,f,g,h having d !='5' 
order by i,g,h,b,c desc;

# 以下场景基于上面条件进行的多次join测试

# inner join

# ror union 
explain
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2
on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

# sort union 
explain
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

# 以下测试为上面两个复杂查询的union

# union
explain
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
union
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
union
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

# union all 
explain
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
union all 
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a = 1 and e = 1) or (b = '1' and f = '1')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
union all
select *, count(c) as i
from t1 force index(idx_a,idx_b) 
inner join t2 on a = e or b = f
    inner join t3 on c = col1
    inner join t4 on d = col3
where ( a < 2 and e < 2) or (b < '2' and f < '2')
group by c,a,b,d,e,f,g,h,col1,col2,col3,col4
having d !='5'
order by i,g,h,b,c desc;

# 环境清理

drop database index_merge_sequoiadb;

set session optimizer_switch="index_merge_intersection=default";

--source include/uninstall_sequoiadb.inc
